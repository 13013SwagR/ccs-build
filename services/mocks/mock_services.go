// Code generated by MockGen. DO NOT EDIT.
// Source: cri.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/docker/docker/api/types"
	registry "github.com/docker/docker/api/types/registry"
	gomock "github.com/golang/mock/gomock"
)

// MockCriClient is a mock of CriClient interface.
type MockCriClient struct {
	ctrl     *gomock.Controller
	recorder *MockCriClientMockRecorder
}

// MockCriClientMockRecorder is the mock recorder for MockCriClient.
type MockCriClientMockRecorder struct {
	mock *MockCriClient
}

// NewMockCriClient creates a new mock instance.
func NewMockCriClient(ctrl *gomock.Controller) *MockCriClient {
	mock := &MockCriClient{ctrl: ctrl}
	mock.recorder = &MockCriClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCriClient) EXPECT() *MockCriClientMockRecorder {
	return m.recorder
}

// RegistryLogin mocks base method.
func (m *MockCriClient) RegistryLogin(ctx context.Context, auth types.AuthConfig) (registry.AuthenticateOKBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistryLogin", ctx, auth)
	ret0, _ := ret[0].(registry.AuthenticateOKBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegistryLogin indicates an expected call of RegistryLogin.
func (mr *MockCriClientMockRecorder) RegistryLogin(ctx, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistryLogin", reflect.TypeOf((*MockCriClient)(nil).RegistryLogin), ctx, auth)
}

// MockContainerRuntimeInterface is a mock of ContainerRuntimeInterface interface.
type MockContainerRuntimeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockContainerRuntimeInterfaceMockRecorder
}

// MockContainerRuntimeInterfaceMockRecorder is the mock recorder for MockContainerRuntimeInterface.
type MockContainerRuntimeInterfaceMockRecorder struct {
	mock *MockContainerRuntimeInterface
}

// NewMockContainerRuntimeInterface creates a new mock instance.
func NewMockContainerRuntimeInterface(ctrl *gomock.Controller) *MockContainerRuntimeInterface {
	mock := &MockContainerRuntimeInterface{ctrl: ctrl}
	mock.recorder = &MockContainerRuntimeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerRuntimeInterface) EXPECT() *MockContainerRuntimeInterfaceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockContainerRuntimeInterface) Login(username, password, registry string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", username, password, registry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockContainerRuntimeInterfaceMockRecorder) Login(username, password, registry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockContainerRuntimeInterface)(nil).Login), username, password, registry)
}
