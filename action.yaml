# action.yml
name: 'ccs-build'
description: 'Backbone implementation of the build task as per the [CI-CD-Standard](https://github.com/13013SwagR/CI-CD-Standard)'
inputs:
  command:
    description: 'The build command, MUST produce an artifact'
    required: true
  environment_image:
    description: 'The environment in which to execute the build command'
    required: true
  environment_username:
    description: 'Username'
    required: false
  environment_password:
    description: 'Password'
    required: false
  environment_registry:
    description: 'Registry'
    required: false
  environment_workdir:
    description: 'The working directory inside the environment image, also the path to the copied Github workspace directory'
    required: true
    default: '/var/www'
  pipeline_artifacts_path:
    description: |
      The folder path containing the generated build artifacts
      Is child of environment_workdir
      Every first level folders and files will be treated as separate artifacts
      Folders will be compressed to tar.gz
    required: true
    default: pipeline_artifacts
  shell:
    required: true
    description: 'The shell you want to execute the command in. Must be present in the environment image.'
    default: sh
outputs:
  result_code:
    description: 'the result code(integer)'
  execution_log:
    description: the execution log artifact (URL)
  pipeline_artifacts:
    description: the pipeline artifacts (URL), contains the builds produced and the main build number
  build-id:
    description: 'The build identifier for this run.'
  artifacts:
    description: 'Array of artifacts location containing there respective build identifier (<build-id>-<artifact_name>)'
runs:
  using: 'docker'
  image: 'Dockerfile'
  args:
    - ${{ inputs.command }}
    - ${{ inputs.environment_image }}
    - ${{ inputs.environment_username }}
    - ${{ inputs.environment_password }}
    - ${{ inputs.environment_registry }}
    - ${{ inputs.environment_workdir }}
    - ${{ inputs.pipeline_artifacts_path }}
    - ${{ inputs.shell }}


# TODO: Implement output "execution_log"
#  Get exec log
#  Upload to artifact storage

# TODO: Implement output "pipeline_artifacts"

