name: Docker Run Action Tests

on:
  push:
    branches:
      - main
  pull_request:

env:
  ARTIFACT_NAME: ccs-build-action
jobs:
  unit_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.17.0'
      - run: go version
      - name: Run go unit Tests
        run: go test
  result_code_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Assert the action is returning exit code 0
      uses: ./
      id: run-docker
      with:
        environment_image: alpine:3.16.2
        command: echo "::set-output name=alpine-version::`cat /etc/alpine-release`"
    - name: Test the output
      run: |
        python3 <<EOF
        resultCode = ${{ steps.run-docker.outputs.result_code }}
        if resultCode != 0:
          print(resultCode)
          print("result_code_test Failed")
          exit(1)
        EOF
  # pipeline_artifacts_test:
  #   runs-on: ubuntu-latest2
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Test that the action is returning a zero exit code
  #     uses: ./
  #     id: run-docker
  #     with:
  #       environment_image: alpine:3.16.2
  #       command: echo "my new build !@#$%^&*()_+{}[]" > pipeline_artifacts/build.txt; ls -al pipeline_artifacts
  #       artifact_name: ${{ env.ARTIFACT_NAME }}-pipeline_artifacts_test
  #   - name: Test the output
  #     run: |
  #       python3 <<EOF
  #       print("test")
  #       pipeline_artifacts = '${{ steps.run-docker.outputs.pipeline_artifacts }}'
  #       print(f'pipeline_artifacts: ${{ steps.run-docker.outputs.pipeline_artifacts }}')
  #       if pipeline_artifacts != 'build.txt':
  #         print("pipeline_artifacts_test Failed")
  #         exit(1)
  #       EOF